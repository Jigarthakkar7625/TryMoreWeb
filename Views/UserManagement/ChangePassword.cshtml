@model TryMoreWeb.Models.ChangePasswordViewModel

@{
    ViewBag.Title = "ChangePassword";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row">

    <!-- ============================================================== -->
    <!-- valifation types -->
    <!-- ============================================================== -->
    <div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">
        <div class="card">
            <h5 class="card-header">Change Password</h5>
            <div class="card-body">
                @*new Dictionary<string, object>
                    { { "enctype", "multipart/form-data" }, { "data-ajax", "false"} })*@
                @using (Html.BeginForm("ChangePassword", "UserManagement", FormMethod.Post, new Dictionary<string, object>
                                    { { "data-parsley-validate", "" }, { "novalidate", "false"} , { "id", "validationform"} }))

                {

                    @Html.AntiForgeryToken()
                    <div class="form-group row">

                        <label class="col-12 col-sm-3 col-form-label text-sm-right">Old Password</label>
                        <div class="col-12 col-sm-8 col-lg-6">
                            @Html.PasswordFor(m => m.OldPassword, new { @class = "form-control", @required = "", @placeholder = "Old Password" })

                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-12 col-sm-3 col-form-label text-sm-right">New Password</label>
                        <div class="col-12 col-sm-8 col-lg-6">
                            @Html.PasswordFor(m => m.NewPassword,
                           new Dictionary<string, object>
                { { "data-parsley-minlength", "6" }, { "class", "form-control"} , { "id", "inputPassword"} , { "placeholder", "New Password"}  , { "required", ""} })

                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-12 col-sm-3 col-form-label text-sm-right">Repeat Password</label>
                        <div class="col-12 col-sm-8 col-lg-6">
                            @Html.PasswordFor(m => m.ConfirmPassword,
                         new Dictionary<string, object>
              { { "data-parsley-equalto", "#inputPassword" }, { "class", "form-control"} , { "id", "inputRepeatPassword"} , { "placeholder", "Repeat Password"}  , { "required", ""} })

                        </div>
                    </div>

                    <div class="form-group row text-right">
                        <div class="col col-sm-10 col-lg-9 offset-sm-1 offset-lg-0">
                            <button type="submit" class="btn btn-space btn-primary">Submit</button>
                        </div>
                    </div>

                }
            </div>

        </div>
    </div>
    <!-- ============================================================== -->
    <!-- end valifation types -->
    <!-- ============================================================== -->

</div>
<script>$('#form').parsley();</script>
<script>
    // Example starter JavaScript for disabling form submissions if there are invalid fields
    (function () {
        'use strict';
        window.addEventListener('load', function () {
            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            var forms = document.getElementsByClassName('needs-validation');
            // Loop over them and prevent submission
            var validation = Array.prototype.filter.call(forms, function (form) {
                form.addEventListener('submit', function (event) {
                    if (form.checkValidity() === false) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
        }, false);
    })();</script>

<script type="text/javascript">
    $(document).ready(function () {
                if ('@TempData["success"]' == "True") {
                    bootoast.toast({
                        message: '@TempData["message"]',
                        type: 'success',
                        position: 'right-top',
                    });
                }
                else if ('@TempData["success"]' == "False") {
                    bootoast.toast({
                        message: '@TempData["message"]',
                        type: 'danger',
                        position: 'right-top',
                    });
                }

            });
</script>